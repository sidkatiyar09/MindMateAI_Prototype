import nbformat as nbf
import os, json, re

def safe_filename(name):
    # simple safe filename generator
    return re.sub(r'[^a-zA-Z0-9_\-]', '_', name.lower())

def generate_notebook(path, project_name, data_csv_path=None):
    nb = nbf.v4.new_notebook()
    cells = []
    intro = f"# Starter notebook for {project_name}\\nThis notebook was auto-generated by MindMate.AI prototype.\\n"
    cells.append(nbf.v4.new_markdown_cell(intro))
    # imports
    cells.append(nbf.v4.new_code_cell("import pandas as pd\\nimport numpy as np\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.ensemble import RandomForestClassifier\\nfrom sklearn.metrics import classification_report"))
    if data_csv_path and os.path.exists(data_csv_path):
        cells.append(nbf.v4.new_markdown_cell("## Load local logs (from Streamlit prototype)"))
        cells.append(nbf.v4.new_code_cell(f"df = pd.read_csv(r'{data_csv_path}')\\ndf.head()"))
        cells.append(nbf.v4.new_markdown_cell("## Simple preprocessing: label encoding and train-test split"))
        cells.append(nbf.v4.new_code_cell("df = df.dropna()\\n# map labels to numeric\\nmap_label = {'negative':0,'neutral':1,'positive':2}\\ndf['label_num'] = df['label'].map(map_label)\\nX = df['text']\\ny = df['label_num']\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\nvec = TfidfVectorizer(max_features=500)\\nXv = vec.fit_transform(X)\\nX_train, X_test, y_train, y_test = train_test_split(Xv, y, test_size=0.2, random_state=42)\\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\\nclf.fit(X_train, y_train)\\nprint('Training done')\\ny_pred = clf.predict(X_test)\\nprint(classification_report(y_test, y_pred))"))
    else:
        cells.append(nbf.v4.new_markdown_cell("No local CSV found. Add a local CSV named 'mood_logs.csv' in the data/ folder or use the Streamlit app to generate logs."))
        cells.append(nbf.v4.new_code_cell("# Example: load sample dataset\\nimport pandas as pd\\ndf = pd.read_csv('data/sample_student_stress.csv')\\ndf.head()"))
    nb['cells'] = cells
    with open(path, 'w', encoding='utf-8') as f:
        nbf.write(nb, f)
    return path
